# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#

#version: 2 # use CircleCI 2.0
#jobs: # a collection of steps
#  build: # runs not using Workflows must have a `build` job as entry point
#    parallelism: 3 # run three instances of this job in parallel
#    docker: # run the steps with Docker
#      - image: circleci/ruby:2.4.2-jessie-node # ...with this image as the primary container; this is where all `steps` will run
#        environment: # environment variables for primary container
#          BUNDLE_JOBS: 3
#          BUNDLE_RETRY: 3
#          BUNDLE_PATH: vendor/bundle
#          PGHOST: 127.0.0.1
#          PGUSER: circleci-demo-ruby
#          RAILS_ENV: test
#      - image: circleci/postgres:9.5-alpine # database image
#        environment: # environment variables for database
#          POSTGRES_USER: circleci-demo-ruby
#          POSTGRES_DB: rails_blog
#          POSTGRES_PASSWORD: ""
#    steps: # a collection of executable commands
#      - checkout # special step to check out source code to working directory
#
#      # Which version of bundler?
#      - run:
#          name: Which bundler?
#          command: bundle -v
#
#      # Restore bundle cache
#      - restore_cache:
#          keys:
#            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
#            - rails-demo-bundle-v2-
#
#      - run:
#          name: Bundle Install
#          command: bundle check || bundle install
#
#      # Store bundle cache
#      - save_cache:
#          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
#          paths:
#            - vendor/bundle
#
#      # Only necessary if app uses webpacker or yarn in some other way
#      - restore_cache:
#          keys:
#            - rails-demo-yarn-{{ checksum "yarn.lock" }}
#            - rails-demo-yarn-
#
#      - run:
#          name: Yarn Install
#          command: yarn install --cache-folder ~/.cache/yarn
#
#      # Store yarn / webpacker cache
#      - save_cache:
#          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
#          paths:
#            - ~/.cache/yarn
#
#      - run:
#          name: Wait for DB
#          command: dockerize -wait tcp://localhost:5432 -timeout 1m
#
#      - run:
#          name: Database setup
#          command: bin/rails db:schema:load --trace
#
#      - run:
#          name: Run rspec in parallel
#          command: |
#            bundle exec rspec --profile 10 \
#                              --format RspecJunitFormatter \
#                              --out test_results/rspec.xml \
#                              --format progress \
#                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
#
#      # Save test results for timing analysis
#      - store_test_results:
#          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs



version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
#      - run: bundle exec rake db:create
#      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results