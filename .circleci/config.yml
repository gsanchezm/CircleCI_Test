# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/#sample-configuration for more details
#
# Steps for config yaml file

version: 2.0 #Start with Circle CI version.

jobs: # a collection of steps
# runs not using Workflows must have a `build` job as entry point

  "ruby-2.2": #set the language
#    docker: # run the steps with Docker
#      - image: .circleci/ruby:2.2-node #.circleci/<language>:<version TAG>
#      - image: .circleci/postgres:9.4.12-alpine
    machine: true
    working_directory: ~/Users/gilberto.sanchez/Desktop/kobiton_trial/features
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
       # Which version of bundler?
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - run:
          name: Run tests
          command: rake

  "ruby-2.3":
#    docker:
#      - image: .circleci/ruby:2.3-node
#      - image: .circleci/postgres:9.4.12-alpine
    machine: true
    working_directory: ~/Users/gilberto.sanchez/Desktop/kobiton_trial/features
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          - v1-dependencies-
      - run:
          name: Run tests
          command: rake

  "ruby-2.4":
#    docker:
#      - image: .circleci/ruby:2.4-node
#      - image: .circleci/postgres:9.4.12-alpine
    machine: true
    working_directory: ~/Users/gilberto.sanchez/Desktop/kobiton_trial/features
    steps:
      - checkout
      - restore_cache:
         keys:
         - v1-dependencies-{{ checksum "Gemfile.lock" }}
         - v1-dependencies-
      - run:
          name: Run tests
          command: rake

      # collect reports
      - store_test_results:
        path: /tmp/test-results
      - store_artifacts:
        path: /tmp/test-results
        destination: test-results

#Indicate how to run a collection of jobs
workflows:
  version: 2
  build:
    jobs:
      - "ruby-2.2"
      - "ruby-2.3"
      - "ruby-2.4"


#       RUBY YAML FILE
#      # Ruby CircleCI 2.0 configuration file
#      #
#      # Check https://circleci.com/docs/2.0/language-ruby/ for more details
#      #
#      version: 2
#      jobs:
#        build:
#          docker:
#            # specify the version you desire here
#             - image: circleci/ruby:2.4.1-node-browsers
#
#            # Specify service dependencies here if necessary
#            # CircleCI maintains a library of pre-built images
#            # documented at https://circleci.com/docs/2.0/circleci-images/
#            # - image: circleci/postgres:9.4
#
#          working_directory: ~/repo
#
#          steps:
#            - checkout
#
#            # Download and cache dependencies
#            - restore_cache:
#                keys:
#                - v1-dependencies-{{ checksum "Gemfile.lock" }}
#                # fallback to using the latest cache if no exact match is found
#                - v1-dependencies-
#
#            - run:
#                name: install dependencies
#                command: |
#                  bundle install --jobs=4 --retry=3 --path vendor/bundle
#
#            - save_cache:
#                paths:
#                  - ./vendor/bundle
#                key: v1-dependencies-{{ checksum "Gemfile.lock" }}
#
#            # Database setup
#            - run: bundle exec rake db:create
#            - run: bundle exec rake db:schema:load
#
#            # run tests!
#            - run:
#                name: run tests
#                command: |
#                  mkdir /tmp/test-results
#                  TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
#
#                  bundle exec rspec --format progress \
#                                  --format RspecJunitFormatter \
#                                  --out /tmp/test-results/rspec.xml \
#                                  --format progress \
#                                  $TEST_FILES
#
#            # collect reports
#            - store_test_results:
#                path: /tmp/test-results
#            - store_artifacts:
#                path: /tmp/test-results
#                destination: test-results